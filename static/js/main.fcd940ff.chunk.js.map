{"version":3,"sources":["Components/Home/Home.js","Components/Blog.js","Components/Projects.js","Components/About.js","Components/Navbar.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Home","Fragment","name","content","rel","href","src","crossorigin","className","style","width","role","class","target","title","Component","Blog","Container","fluid","blogPosts","map","item","Title","console","log","BlogPosts","jtem","Subhead","Paragraphs","ktem","Projects","About","Navbar","props","navbarLinks","this","link","i","key","onClick","updatePage","currentPage","App","state","bind","newPage","setState","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iSA+CeA,G,yLA1CX,OACE,kBAAC,IAAMC,SAAP,KACE,8BACE,0BAAMC,KAAK,WAAWC,QAAQ,0DAC9B,0BAAMC,IAAI,aAAaC,KAAK,uFAC5B,4BAAQC,IAAI,4CAA4CC,YAAY,eAEtE,yBACEC,UAAU,6CACVC,MAAO,CAACC,MAAO,SAcf,0BAAMC,KAAK,OAAOH,UAAU,eAC1B,wBAAIA,UAAU,iBAAd,uBACA,uBAAGA,UAAU,QAAb,iGAGF,4BAAQA,UAAU,oBAChB,yBAAKA,UAAU,SACb,4DACA,uBAAGI,MAAM,OAAOP,KAAK,gCAAgCQ,OAAO,SAASC,MAAM,UAAS,uBAAGF,MAAM,mBAC7F,uBAAGP,KAAK,qDAAqDQ,OAAO,SAASC,MAAM,YAAW,uBAAGF,MAAM,6B,GAlClGG,c,eCwBJC,E,uKArBP,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACV,UAAU,WACtBW,EAAUC,KAAI,SAAAC,GAAI,OACf,kBAACJ,EAAA,EAAD,CAAWT,UAAU,WACjB,4BAAKa,EAAKC,OACTC,QAAQC,IAAIH,GACZA,EAAKI,UAAUL,KAAI,SAAAM,GAAI,OACpB,kBAAC,IAAMzB,SAAP,KACI,4BAAKyB,EAAKC,SACTD,EAAKE,WAAWR,KAAI,SAAAS,GAAI,OACrB,2BAAIA,mB,GAZrBd,aCFEe,E,uKAEb,OACI,sD,GAH0Bf,aCAjBgB,E,uKAEb,OACI,sD,GAHuBhB,aCAdiB,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,YAAc,CACf,OACA,OACA,WACA,SANW,E,qDAUT,IAAD,OACL,OACI,4BAAQ1B,UAAU,iBACd,yBAAKA,UAAU,SACX,wBAAIA,UAAU,kBAAd,WACA,yBAAKA,UAAU,2CACV2B,KAAKD,YAAYd,KAAI,SAACgB,EAAMC,GAAP,OAClB,kBAAC,IAAMpC,SAAP,CAAgBqC,IAAKD,GACjB,uBACIE,QAAS,kBAAM,EAAKN,MAAMO,WAAWJ,IACrC/B,KAAK,IACLG,UAAW,EAAKyB,MAAMQ,cAAgBL,EAAO,kBAAoB,YAEhEA,c,GAxBDrB,aC4CrB2B,E,kDAnCb,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IACDU,MAAQ,CACXF,YAAa,QAHE,E,qDAQjB,OACE,kBAACxB,EAAA,EAAD,CAAWC,OAAK,EAACV,UAAU,OACzB,kBAAC,EAAD,CACEiC,YAAaN,KAAKQ,MAAMF,YACxBD,WAAYL,KAAKK,WAAWI,KAAKT,QAIN,SAA3BA,KAAKQ,MAAMF,YACT,kBAAC,EAAD,MAC2B,SAA3BN,KAAKQ,MAAMF,YACT,kBAAC,EAAD,MAC2B,aAA3BN,KAAKQ,MAAMF,YACT,kBAAC,EAAD,MACA,kBAAC,EAAD,S,iCAMHI,GACTV,KAAKW,SAAS,CACZL,YAAaI,Q,GA/BDE,IAAMhC,WCEJiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.fcd940ff.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Home.css'\n\nclass Home extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <head>\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"></meta>\n          <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"></link>\n          <script src=\"https://kit.fontawesome.com/74b0f32803.js\" crossorigin=\"anonymous\"></script>\n        </head>\n        <div \n          className=\"d-flex w-100 h-100 p-3 mx-auto flex-column\"\n          style={{width: '100%'}}\n        >\n          {/* <header className=\"masthead mb-auto\">\n          <div className=\"inner\">\n            <h3 className=\"masthead-brand\">Welcome</h3>\n            <nav className=\"nav nav-masthead justify-content-center\">\n              <a className=\"nav-link active\">Home</a>\n              <a className=\"nav-link\" >About</a>\n              <a className=\"nav-link\">Blog</a>\n              <a className=\"nav-link\">Projects</a>\n            </nav>\n          </div>\n        </header> */}\n\n          <main role=\"main\" className=\"inner cover\">\n            <h1 className=\"cover-heading\">My Bootcamp Website</h1>\n            <p className=\"lead\">This is a website designed by Cody Herbst during the Awesome Inc Bootcamp. I hope you enjoy!</p>\n          </main>\n\n          <footer className=\"mastfoot mt-auto\">\n            <div className=\"inner\">\n              <p>Created by Cody Herbst - 2020</p>\n              <a class=\"pl-5\" href=\"https://github.com/codyherbst\" target=\"_blank\" title=\"Github\"><i class=\"fab fa-github\"></i></a>\n              <a href=\"https://www.linkedin.com/in/cody-herbst-365146162/\" target=\"_blank\" title=\"LinkedIn\"><i class=\"fab fa-linkedin\"></i></a>\n\n            </div>\n          </footer>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Home","import React, { Component } from 'react'\nimport { Container } from 'reactstrap'\nimport blogPosts from '../blogposts.json'\n\nclass Blog extends Component {\n    render() {\n        return (\n            <Container fluid className='mx-auto'>\n                {blogPosts.map(item => (\n                    <Container className='bg-dark'>\n                        <h2>{item.Title}</h2>\n                        {console.log(item)}\n                        {item.BlogPosts.map(jtem => (\n                            <React.Fragment>\n                                <h3>{jtem.Subhead}</h3>\n                                {jtem.Paragraphs.map(ktem => (\n                                    <p>{ktem}</p>\n                                ))}\n                            </React.Fragment>\n                        ))}\n                    </Container>\n                ))}\n            </Container>\n        )\n    }\n}\n\nexport default Blog","import React, { Component } from 'react'\n\nexport default class Projects extends Component {\n    render() {\n        return (\n            <div>\n                Under Development\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class About extends Component {\n    render() {\n        return (\n            <div>\n                Under Development\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Navbar extends Component {\n    constructor(props) {\n        super(props)\n        this.navbarLinks = [\n            'Home',\n            'Blog',\n            'Projects',\n            'About'\n        ]\n    }\n    \n    render() {\n        return (\n            <header className=\"masthead pb-5\">\n                <div className=\"inner\">\n                    <h3 className=\"masthead-brand\">Welcome</h3>\n                    <nav className=\"nav nav-masthead justify-content-center\">\n                        {this.navbarLinks.map((link, i) => (\n                            <React.Fragment key={i}>\n                                <a\n                                    onClick={() => this.props.updatePage(link)}\n                                    href='#'\n                                    className={this.props.currentPage === link ? 'nav-link active' : 'nav-link'}\n                                >\n                                    {link}\n                                </a>\n                            </React.Fragment>\n                        ))}\n                        {/* <a className=\"nav-link active\">Home</a>\n                        <a className=\"nav-link\">Blog</a>\n                        <a className=\"nav-link\">Projects</a>\n                        <a className=\"nav-link\">About</a> */}\n                    </nav>\n                </div>\n            </header>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Home from '../Home/Home'\nimport Blog from '../Blog'\nimport Projects from '../Projects'\nimport About from '../About'\nimport Navbar from '../Navbar'\nimport { Container } from 'reactstrap';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentPage: 'Home'\n    }\n  }\n\n  render() {\n    return (\n      <Container fluid className='App'>\n        <Navbar\n          currentPage={this.state.currentPage}\n          updatePage={this.updatePage.bind(this)}\n        />\n\n        {\n          this.state.currentPage === 'Home' ?\n            <Home /> :\n            this.state.currentPage === 'Blog' ?\n              <Blog /> :\n              this.state.currentPage === 'Projects' ?\n                <Projects /> :\n                <About />\n        }\n      </Container>\n    );\n  }\n\n  updatePage(newPage) {\n    this.setState({\n      currentPage: newPage\n    })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}